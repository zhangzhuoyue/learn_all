#面试总结

---
### 个人情况
* 自己最大方的缺点

`我的缺点是，比较执着，比如在技术方面比较爱钻研，有的时候会为一个技术问题加班到深夜。还有就是，工作比较按部就班，总是按照主管的要求完成任务。另外的缺点是，总在自己的工作范围内有创新意识，并没有扩展给其他同事。这些问题我想我可以进入公司以后以最短的时间来解决，我的学习能力很强，我相信可以很快融入公司的企业文化，进入工作状态。`

* 自己最大的优点

围绕技术说明：我的优点：我拿自己身上的例子：我的优点：热爱技术，多线程的问题的分析对于之前的我来说是玄学，利用自己的时间，花了2个月学完，能沉下心做事。

* 未来三年规划人

工作中对技术进行深化，知道一些为什么，能够自己进行问题分析，定位，提出解决方案 。

----
### 项目

* 技术框架

`微服务治理框架springcloud 、业务层框架springboot、web层框架springmvc、持久层框架mybatis；  `    
`nosql：redis、mongdb ；   关系型数据库：MySQL；    消息中间件：rabbitmq ；  微服务部署： docker+k8s；  前端使用angular` 

* 项目目的

项目依托微服务springcloud各组件，采用前后端分离开发。旨在为中国人保集团以及成员单位下的查勘员、车、案件的提供近实时的数据服务。平台以案件、查勘员、查勘车辆为维度，根据案件属性、查勘员属性、车辆属性为当前组织提供不同纬度的数据时效信息。并通过大屏可视化，实现高效呈现当前组织下车险理赔业务情况。

* 项目规模 

1 个需求 ；1个后端开发 ； 1个前端开发 ；1个数据处理

* 自己负责的开发部分

   1.负责理赔运行平台三大块：案件展示 查勘员展示 车辆展示  
   案件维度：1.案件地图坐标转换，将高德的火星坐标转换为百度的百度坐标；  
            2.案件超时和已完成计算  
            3.top 10 案件柱状展示
   解释：
   案件种类：风险预警案件、省间通赔案件、省内通赔案件，本地自配，未决案件  
   案件超时怎么计算：案件是异地或本地，完成时间不同，当前时间 - 立案时间 大于规定时间则超时案件【使用定时任务，集群环境下的定时任务】
   
   2.查勘员维度：1.通过计算，过滤出在线查勘员进行展示 
                2.查勘员个人信息展示，信息来自人保公司的HR信息库【使用它的只读库】  
                3.已完成和未完成案件：分类展示风险预警案件、省间通赔案件、省内通赔案件，本地自配，未决案件中 已完成案件和未完成案件数以及比例  
                4.查勘员和案件进行联动展示
      在线离线：当前时间- 人员坐标上传时间 < 4个小时 该人员是在线【工作人员有华为平板，会上传用户的坐标】            
   
   
   3.车辆维度 ：1.为车辆展示提供车辆坐标  
               2.车辆历史轨迹，当天历史轨迹分段展示【数据存储在mongdb中】
               3.车辆在线离线和计算【车辆GPS上传坐标时间，当前时间 - 坐标最后上传时间 > 4 车辆离线】
               
*   项目总述：  
*      防止接口抖动：1.数据库实现幂等：select delete  唯一索引，防止创建脏数据【用户唯一id，防止重复创建】  
                     悲观锁：获取数据的时候加锁获取 
                         select * from table_xxx where id='xxx' for update; 
                         注意：id字段一定是主键或者唯一索引，不然是锁表，会死人的 
                         悲观锁使用时一般伴随事务一起使用，数据锁定时间可能会很长，根据实际情况选用  
                     乐观锁：乐观锁只是在更新数据那一刻锁表，其他时间不锁表，所以相对于悲观锁，效率更高。            
                   2.客户端幂等控制机制-token  
                     业务要求： 
                     页面的数据只能被点击提交一次  
                     发生原因：  
                    由于重复点击或者网络重发，或者nginx重发等情况会导致数据被重复提交  
                    解决办法：  
                    集群环境：采用token加redis（redis单线程的，处理需要排队）  
                    单JVM环境：采用token加redis或token加jvm内存  
                    处理流程：  
                    1. 数据提交前要向服务的申请token，token放到redis或jvm内存，token有效时间  
                    2. 提交后后台校验token，同时删除token，生成新的token返回  
                    token特点：  
                    要申请，一次有效性，可以限流  
                    具体实现：通知执行顺序，环绕通知->前置通知  
                    使用通知，在请求接口前，环绕通知->验证redis中是否有token,不存在则是重复提交。前置通知 -> 将新的token存入redis和request域返回前端;
*    rabbitmq短信：理赔平台有多个资源管理平台、运营指标平台。这两个平台都有短信发送功能，将功能抽出来，做成一个公共服务。     
      ```
     技术选型：kafka rabbitmq rocketmq 介绍他们的优缺点：  
           1.兼容性，技术的成熟度【rabbitmq 2007；rocketmq 2011 参考kafka； kafka 2011】，一般业务，每秒十几万的吞吐量完全使用。    
           rabbitmq:最流行的开源消息中间件之一。springboot默认的消息中间件，开源社区活跃，遇到问题有大量的资料可以借鉴，每秒十几万的吞吐量，但是流量达到阀值后，吞吐量会急速下降。满足多数业务。如果需要定制化，不建议使用，因为他使用Erlang，该语言学习陡峭    
           rocketmq:java开发，在国内有大量的资料，易扩展，即使在即使在大流量下，吞吐量依然稳定。在与springcloud兼容性上不如rabbitmq。  
           rabbitmq  和 rocketmq  在一般业务中，并没与大的区别。现在流行的消息中间件功能差不多，只是有一些侧重。  
           kafka :适用于数据量大的业务场景，使用了批量的思想，kafka在接受一条消息后不会立即发送，而是先攒一波才发送，因此他不适合有实时性的线上业务
     ```
      ```
       
      
      java发送邮件使用smtp协议，在框架中引入mail.jar就可以使用 ->这里使用多线程这里使用线程池完成。  
      多线程没有使用Executors静态工厂类，提供了预定义的线程池，但是这些线程池默认使用的无界队列，无法对线程资源进行有效的控制，使用ThreadPoolExecutor，可以指定有界队列ArrayBlockingQueue  
      
     ```
```
业务：超时案件提醒
业务目的：及时处理未完成案件
具体业务：省级120 市级90 县70 ，具体处理案件的是县级，省级和市级的作用了解区域案件进展。定时任务：没个70分钟将案件进行一次检查，
         如果出现超时案件，则发送短信。如果县级案件超时，但是查勘员已经到达案发地，则不再进行邮件提醒。
技术实现：由于每天案件量在20多万，直接从数据库中查询做判断超时，显然时间成本太高。所以使用考虑到数据的IO瓶颈，已经业务代码的处理能力。使用了批量和异步思想
数据库批量：每次从数据库查询出案件号 案件处理人 案件发生地 邮件发送标识 ，每次查询500条数据
异步思想：1.CyclicBarrier 循环栅栏 等待线程数1【批量查询数据库，将数据放入队列中】  线程完成后触发循环栅栏的异步任务，通知查询数据库任务立即开启。任务之间没有等待。
问题：为什么不开两个线层执行超时计算？开启两个线程就比较负责，涉及到线程协作和给队列加锁的问题，遇到这种锁的问题，我一般是避免使用的。
```     
* 镜像制作 k8s平台了解  
1. 使用的基础镜像alpine; 制作镜像，中间出现出现的问题？
2. k8s的网络问题怎么解决的。