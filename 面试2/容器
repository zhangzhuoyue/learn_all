## 容器

1. 镜像常见操作：  
   ```
   查找镜像
           docker search [tomcat] 搜索docker hub网站镜像详细信息
       
       下载镜像
           docker pull 镜像名：TAG
       
       查看镜像：
           docker image ls  或者 docker images   #查看本地镜像
       
       
       删除镜像：
           docker rmi -f 镜像ID 或镜像名：TAG
           删除指定本地镜像
           -f 表示强制删除
           docker rm <CONTAINER ID>: 删除容器
           docker rmi <IMAGE ID>: 删除镜像
       
       
       创建一个新的容器，起名称，指定宿主机和docker通信的端口
           运行容器： docker run --name tom  -d -p 8080:8080 tomcat:8.0.52
           一个镜像可以run多个容器，镜像不会被改变。
       
       
       
       容器有在运行，可以通过 docker ps 来查看
           docker ps
       
       查看日志：
           docker logs 容器名/容器id
       
       进入容器并且开启交互中模式终端
           docker exec -it 容器ID或者容器名 /bin/bash
   ```
2. 查看容器日志
    ```
   docker logs    如果容器已经启动过则可以查看他的启动记录
   docker logs -f --tail 100  容器id
   --follow , -f   跟踪日志输出
   --tail   all(默认)     从日志末尾开始显示的行数
   ```
3. docker的单线程原理
    ```
   docker本质是一个进程。
   nohup 命令启动的是一个进程。
   从他们启动的对象来看，是冲突的。只有操作系统中才能运行多个进程。
   ```

4. gitlab-ci
    ```
   1. 提交代码  ， GitLab push 代码时，自动 trigger Jenkins 工程执行构建动作
   2. 触发ci管道，根据自定义的gitlab-ci.yml 自定义持续集成文件【定义镜像推送地址  版本号，执maven打包，然后执行dockerfile文件，将jar制作镜像，然后推送。】  进行
   3. docker打镜像命令 ： 
   ```

5. docker上传私服
    ```
   由于docker默认镜像仓库是dockerhub，所以java:my相当于docker.io/java:my，因此，想要将镜像推送到私服仓库中，需要修改镜像标签。
   docker tag java:my localhost:5000/java:my
   
    获取私有仓库镜像
   docker pull localhost:5000/java:my
   ```
---
## k8s  
1. kuberbetes 架构主题
      ```
    1. Kubernetes 项目的架构，都由 Master 和 Node 两种节点组成，而这两种角色分别对应着控制节点和计算节点
        1. Master 节点，由三个紧密协作的独立组件组合而成，它们分别是负责 API 服务的 kube-apiserver、负责调度的 kube-scheduler，以及负责容器编排的 kube-controller-	         manager。整个集群的持久化数据，则由 kube-apiserver 处理后保存在 Etcd 中。
        2.   计算节点上最核心的部分，则是一个叫作 kubelet 的组件。
        Kubernetes 项目中，kubelet 主要负责同容器运行时（比如 Docker 项目）打交道。而这个交互所依赖的，是一个称作 CRI（Container Runtime Interface）的远程调用接口，这个接口定义了容器运行时的各项核心操作，比如：启动一个容器需要的所有参数。这也是为何，Kubernetes 项目并不关心你部署的是什么容器运行时、使用的什么技术实现，只要你的这个容器运行时能够运行标准的容器镜像，它就可以通过实现 CRI 接入到 Kubernetes 项目当中。而具体的容器运行时，比如 Docker 项目，则一般通过 OCI 这个容器运行时规范同底层的 Linux 操作系统进行交互，即：把 CRI 请求翻译成对 Linux 操作系统的调用（操作 Linux Namespace 和 Cgroups 等）
         kubelet 的另一个重要功能，则是调用网络插件和存储插件为容器配置网络和持久化存储
        
              Kubernetes 项目就没有像同时期的各种“容器云”项目那样，把 Docker 作为整个架构的核心，而仅仅把它作为最底层的一个容器运行时实现。实现CRI接口规范就可以接受kuberbetes的调度，编排。
        
        Kubernetes 项目要着重解决的问题：运行在大规模集群中的各种任务之间，实际上存在着各种各样的关系。这些关系的处理，才是作业编排和管理系统最困难的地方。
   
    2. Pod 是 Kubernetes 项目中最基础的一个对象，
    ```
2. 容器网络通信
    ```
    容器通信的总结：
       在默认情况下，被限制在 Network Namespace 里的容器进程，实际上是通过 Veth Pair 设备 + 宿主机网桥的方式，实现了跟同其他容器的数据交换。
       宿主机访问容器，也是通过docker0网桥转发Veth Pair设备。
   
       当一个容器访问另一个宿主机，发出的数据包。首先，经过docke0发送到宿主机上。然后，根据宿主机的路由表，路由到另一台宿主机。
       当一个容器无法访问往往，试一试能不能ping通docker0.查看一下跟 docker0 和 Veth Pair 设备相关的 iptables 规则是不是有异常，往往就能够找到问题的答案了。
   ```















 