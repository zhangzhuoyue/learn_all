## 数据结构

### 查找算法

1. 暴力：遍历 ，for循环

2. 二分查找；条件是有序；

2. hash：O(1)  ;存在问题hash冲突
    ```
   1. hashmap 数据结果：数组 链表  红黑树
   2. 为什么会出现红黑树：处理hash冲突，如果hash冲突多，链表的查找耗时O(n),红黑树O(logn)
   ```

4. 红黑树  :高效查找

5.  二叉搜索树  logn
    1. 二叉树特点
        ```
       1. 从根节点分开，左边的数比根节点小，右边的树比根节点大。它的子数也满足这个条件
       ```

---
### 红黑树

1. 特点
    ```
   1.   红黑树是很多平衡树的一种，保证最坏情况下基本动态几何操作时间复杂度为O(log(n))
   2.  红黑树是一棵二叉搜索树，它在每个节点增加了一个存储位记录节点的颜色，可以是RED,也可以是BLACK；通过任意一条从根到叶子简单路径上颜色的约束，红黑树保证最长路径不超过最短路径的二倍，因而近似平衡。
   3. 具体性质如下：
           1.每个节点颜色不是黑色，就是红色
           2.根节点是黑色的
           3.如果一个节点是红色，那么它的两个子节点就是黑色的（没有连续的红节点）
           4.对于每个节点，从该节点到其后代叶节点的简单路径上，均包含相同数目的黑色节点
           5.那么为什么当满足以上性质时，就能保证最长路径不超过最短路径的二倍了
       你的最短路径就是全黑节点，最长路径就是一个红节点一个黑节点，最后黑色节点相同时，最长路径刚好是最短路径的两倍
   ```

2. 红黑树遍历
    ```
   1. 接下来开始插入节点如果插入节点的父亲为黑那么直接插入后返回不需要做任何调整. 但是如果插入节点的父亲为红，那么就需要调整了.具体的调整过程可以分为三个情况：
   ```
3. 红黑树插入

4. 红黑树的删除





